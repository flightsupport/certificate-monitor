name: Docker

on:
  push:
    branches: ["main"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20
        with:
          cosign-release: "v2.2.4"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata for app
        id: meta-app
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-app

      - name: Extract Docker metadata for scheduler
        id: meta-scheduler
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-scheduler

      - name: Extract Docker metadata for nginx
        id: meta-nginx
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-nginx

      - name: Build and push Docker image for app
        id: build-and-push-app
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09
        with:
          context: .
          file: docker/app/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-app.outputs.tags }}
          labels: ${{ steps.meta-app.outputs.labels }}
          cache-from: type=gha,scope=app
          cache-to: type=gha,mode=max,scope=app

      - name: Build and push Docker image for scheduler
        id: build-and-push-scheduler
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09
        with:
          context: .
          file: docker/scheduler/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-scheduler.outputs.tags }}
          labels: ${{ steps.meta-scheduler.outputs.labels }}
          cache-from: type=gha,scope=scheduler
          cache-to: type=gha,mode=max,scope=scheduler

      - name: Build and push Docker image for nginx
        id: build-and-push-nginx
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09
        with:
          context: .
          file: docker/nginx/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-nginx.outputs.tags }}
          labels: ${{ steps.meta-nginx.outputs.labels }}
          cache-from: type=gha,scope=nginx
          cache-to: type=gha,mode=max,scope=nginx

      - name: Sign the published Docker image for app
        if: github.event_name != 'pull_request'
        env:
          TAGS: ${{ steps.meta-app.outputs.tags }}
          DIGEST: ${{ steps.build-and-push-app.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      - name: Sign the published Docker image for scheduler
        if: github.event_name != 'pull_request'
        env:
          TAGS: ${{ steps.meta-scheduler.outputs.tags }}
          DIGEST: ${{ steps.build-and-push-scheduler.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      - name: Sign the published Docker image for nginx
        if: github.event_name != 'pull_request'
        env:
          TAGS: ${{ steps.meta-nginx.outputs.tags }}
          DIGEST: ${{ steps.build-and-push-nginx.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
